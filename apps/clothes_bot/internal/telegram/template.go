package telegram

import (
	"bytes"
	"encoding/json"
	"fmt"
	"os"
	"reflect"

	"domain"
)

var t = new(templates)

const (
	yes string = "‚úÖ"
	no         = "‚ùå"
)

const (
	askForDeliveryAddressTemplate = "–û—Ç–ø—Ä–∞–≤—å –∞–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ—Å—Ç–∞–º–∞—Ç–∞ PickPoint –∏–ª–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –°–î–≠–ö ‚õ≥Ô∏è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
		"–°—Ç—Ä–∞–Ω–∞, –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞/—Å—Ç—Ä–æ–µ–Ω–∏—è üè°\n\n" +
		"–Ø –¥–æ—Å—Ç–∞–≤–ª—é —Ç–≤–æ–π –∑–∞–∫–∞–∑ —Ç—É–¥–∞ üöö"

	askForPhoneNumberTemplate = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n üëâ 79128000000"

	invalidFIOInputTemplate = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏.\\n –û—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ " +
		"—Ñ–æ—Ä–º–∞—Ç–µ - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"

	askForFIOTemplate = "–£–∫–∞–∂–∏ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è \U0001FAAA"

	askForButtonColorTemplate = "–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏\n(–≤–ª–∏—è–µ—Ç –Ω–∞ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ üöö –∏ —Ü–µ–Ω—É ü•¨ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º)"

	askForSizeTemplate = "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä üìè\n–ù–∞–ø—Ä–∏–º–µ—Ä: L –∏–ª–∏ 54\n–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å #"

	askForPriceTemplate = "–û—Ç–ø—Ä–∞–≤—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö ¬•\n(—É–∫–∞–∑–∞–Ω–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ) üí¥"

	askForCategoryTemplate = "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å) üí¥\n\n" +
		"–í –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ª–µ–≥–∫–æ–π –æ–¥–µ–∂–¥—ã¬ª–æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤—Å—è –æ–±—É–≤—å, –∫—Ä–æ–º–µ –∑–∏–º–Ω–µ–π –∏ –æ–¥–µ–∂–¥–∞, –∫—Ä–æ–º–µ –∫—É—Ä—Ç–æ–∫ üëüüß¢\n\n" +
		"–í –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´—Ç—è–∂–µ–ª–∞—è –æ–¥–µ–∂–¥–∞¬ª–æ—Ç–Ω–æ—Å—è—Ç—Å—è –≤—Å–µ –∫—É—Ä—Ç–∫–∏ –∏ –∑–∏–º–Ω—è—è –æ–±—É–≤—å üß•ü•æ"

	askForLinkTemplate = "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä (—Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏) üìù"

	askForCalculatorInputTemplate = "–û—Ç–ø—Ä–∞–≤—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ ¬•, —è –ø–æ—Å—á–∏—Ç–∞—é —ç—Ç–æ –≤ ‚ÇΩ  üá®üá≥üá∑üá∫\n\n" +
		"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ú–æ—Å–∫–≤—ã, –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ " +
		"—Ä–∞–π–æ–Ω—ã –†–æ—Å—Å–∏–∏ –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –¢–ö –°–î–ï–ö üöö"

	editPositionTemplate = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë üôÖ‚Äç‚ôÇÔ∏è\n\n–ü–æ –∫–ª–∏–∫—É –Ω–∞ " +
		"–∫–Ω–æ–ø–∫—É –ø–æ–∑–∏—Ü–∏—è –∏–∑—á–µ–∑–Ω–µ—Ç –∏–∑ —Ç–≤–æ–µ–π –∫–æ—Ä–∑–∏–Ω—ã!"

	newPositionWarnTemplate = "–ù–æ–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ ü¶ß"

	deliveryOnlyToMoscowTemplate = "–°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ú–æ—Å–∫–≤—ã, –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥—Ä—É–≥–∏–µ " +
		"–≥–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã –†–æ—Å—Å–∏–∏ –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –¢–ö –°–î–ï–ö üöö"

	askForPromocodeTemplate = "–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥: "
	promoWarnTemplate       = "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!"
	promoUseSuccessTemplate = "–ü—Ä–æ–º–æ–∫–æ–¥ %s —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %d ‚ÇΩ"

	productCardTemplate = "–¢–æ–≤–∞—Ä: <a href=\"%s\">%s</a>\n" +
		"–†–∞–∑–º–µ—Ä(—ã): %s\n" +
		"–ï—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ: %s\n" +
		"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: %d\n\n" +
		"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: %d ‚ÇΩ"

	productCardDiscountedTemplate = "–¢–æ–≤–∞—Ä: <a href=\"%s\">%s</a>\n" +
		"–†–∞–∑–º–µ—Ä(—ã): %s\n" +
		"–ï—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ: %s\n" +
		"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: %d\n\n" +
		"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: %d ‚ÇΩ\n" +
		"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: %d ‚ÇΩ"

	cartPositionDiscounted = "%d. –°—Å—ã–ª–∫–∞: %s\n–†–∞–∑–º–µ—Ä: %s\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö: %d ¬•\n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: " +
		"%d ‚ÇΩ\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: %d ‚ÇΩ\n\n"

	singleOrderDiscountedPreview = "–ó–∞–∫–∞–∑: %s\n–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: %s\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: %s\n\n–û–ø–ª–∞—á–µ–Ω: %s\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–æ–º:" +
		" %s\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: %s\n\n–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: %d\n–°—É–º–º–∞ –≤ —é–∞–Ω—è—Ö: %d ¬•\n–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: %d ‚ÇΩ\n–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: %d ‚ÇΩ\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞: %s\n\n–¢–æ–≤–∞—Ä(—ã):\n"
)

type templates struct {
	Menu                string `json:"menu,omitempty"`
	Start               string `json:"start,omitempty"`
	Catalog             string `json:"catalog,omitempty"`
	CartPreviewStartFMT string `json:"cartPreviewStart,omitempty"`
	CartPreviewEndFMT   string `json:"cartPreviewEnd,omitempty"`
	CartPositionFMT     string `json:"cartPosition,omitempty"`
	OrderStart          string `json:"order,omitempty"`
	OrderEnd            string `json:"orderEnd,omitempty"`
	AfterPaid           string `json:"afterPaid,omitempty"`
	Requisites          string `json:"requisites,omitempty"`
	GuideStep1          string `json:"guide_step1,omitempty"`
	GuideStep2          string `json:"guide_step2,omitempty"`
	GuideStep3          string `json:"guide_step3,omitempty"`
	GuideStep4          string `json:"guide_step4,omitempty"`
	GuideStep5          string `json:"guide_step5,omitempty"`
	GuideStep6          string `json:"guide_step6,omitempty"`
	MyOrdersStart       string `json:"myOrdersStart,omitempty"`
	MyOrdersEnd         string `json:"myOrdersEnd,omitempty"`
	SingleOrderPreview  string `json:"singleOrderPreview,omitempty"`
}

func getTemplate() *templates {
	return t
}

func LoadTemplates(path string) error {
	var templates templates

	content, err := os.ReadFile(path)
	if err != nil {
		return fmt.Errorf("can't read file %s: %w", path, err)
	}
	if len(content) < 10 {
		return fmt.Errorf("can't decode file content. File is empty")
	}
	if err := json.NewDecoder(bytes.NewReader(content)).Decode(&templates); err != nil {
		return fmt.Errorf("can't decode file content: %w", err)
	}

	v := reflect.ValueOf(&templates).Elem()

	for i := 0; i < v.NumField(); i++ {
		field := v.Field(i)
		if field.Interface() == "" {
			return fmt.Errorf("missing %s template", v.Type().Field(i).Name)
		}
	}

	*t = templates
	return nil
}

func getCartPreviewStartTemplate(numPositions int, isExpress bool) string {
	var orderTypeText string
	if isExpress {
		orderTypeText = "–≠–∫—Å–ø—Ä–µ—Å—Å"
	} else {
		orderTypeText = "–û–±—ã—á–Ω—ã–π"
	}
	return fmt.Sprintf(t.CartPreviewStartFMT, numPositions, orderTypeText)
}

type cartPositionPreviewArgs struct {
	n         int
	link      string
	size      string
	priceRub  uint64
	category  string
	priceYuan uint64
}

func getPositionTemplate(args cartPositionPreviewArgs) string {
	if args.size == "#" {
		args.size = "–±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞"
	}
	return fmt.Sprintf(
		t.CartPositionFMT,
		args.n,
		args.link,
		args.size,
		args.category,
		args.priceYuan,
		args.priceRub,
	)
}

type cartPositionPreviewDiscountedArgs struct {
	n           int
	link        string
	size        string
	priceRub    uint64
	discountRub uint32
	category    string
	priceYuan   uint64
}

func getDiscountedPositionTemplate(args cartPositionPreviewDiscountedArgs) string {
	return fmt.Sprintf(
		cartPositionDiscounted,
		args.n,
		args.link,
		args.size,
		args.category,
		args.priceYuan,
		args.priceRub,
		args.priceRub-uint64(args.discountRub),
	)
}

func getCartPreviewEndTemplate(totalRub uint64, totalYuan uint64) string {
	return fmt.Sprintf(t.CartPreviewEndFMT, totalRub, totalYuan)
}

type orderStartArgs struct {
	fullName        string
	shortOrderID    string
	phoneNumber     string
	isExpress       bool
	deliveryAddress string
	nCartItems      int
}

func getOrderStart(args orderStartArgs) string {
	var expressStr string
	if args.isExpress {
		expressStr = "–≠–∫—Å–ø—Ä–µ—Å—Å"
	} else {
		expressStr = "–û–±—ã—á–Ω—ã–π"
	}

	return fmt.Sprintf(
		t.OrderStart,
		args.fullName,
		args.shortOrderID,
		expressStr,
		args.fullName,
		args.phoneNumber,
		args.deliveryAddress,
		args.nCartItems,
	)
}

func getOrderEnd(amountRub uint64) string {
	return fmt.Sprintf(t.OrderEnd, amountRub)
}

func getRequisites(reqs domain.Requisites, shortOrderID string) string {
	return fmt.Sprintf(t.Requisites, shortOrderID, reqs.SberID, reqs.TinkoffID, shortOrderID)
}

func getCatalog(username string) string {
	return fmt.Sprintf(t.Catalog, username)
}

func getAfterPaid(fullname, shortOrderID string) string {
	return fmt.Sprintf(t.AfterPaid, fullname, shortOrderID)
}

func getMyOrdersStart(fullname string) string {
	return fmt.Sprintf(t.MyOrdersStart, fullname)
}

func getSingleOrderPreview(order domain.ClothingOrder, discounted bool) string {
	var (
		expressStr  string
		paidStr     string
		approvedStr string
		commentStr  string
	)
	if order.IsExpress {
		expressStr = "–≠–∫—Å–ø—Ä–µ—Å—Å"
	} else {
		expressStr = "–û–±—ã—á–Ω—ã–π"
	}

	if order.IsPaid {
		paidStr = yes
	} else {
		paidStr = no
	}

	if order.IsApproved {
		approvedStr = yes
	} else {
		approvedStr = no
	}

	commentStr = order.GetComment()

	if discounted {
		return fmt.Sprintf(
			singleOrderDiscountedPreview,
			order.ShortID,
			expressStr,
			order.DeliveryAddress,
			paidStr,
			approvedStr,
			domain.StatusTexts[order.Status],
			order.Cart.Size(),
			order.AmountYUAN,
			order.AmountRUB,
			order.DiscountedAmount,
			commentStr,
		)
	}

	return fmt.Sprintf(
		t.SingleOrderPreview,
		order.ShortID,
		expressStr,
		order.DeliveryAddress,
		paidStr,
		approvedStr,
		domain.StatusTexts[order.Status],
		order.Cart.Size(),
		order.AmountYUAN,
		order.AmountRUB,
		commentStr,
	)
}

func getStartTemplate(username string) string {
	return fmt.Sprintf(t.Start, username)
}

func promocodeWarning() string {
	return promoWarnTemplate
}

func askForPromocode() string {
	return askForPromocodeTemplate
}

func promocodeUseSuccess(shortID string, discount uint32) string {
	return fmt.Sprintf(promoUseSuccessTemplate, shortID, discount)
}

func productCard(p domain.ClothingProduct, discounted bool, discount *uint32) string {
	if discounted && discount != nil {
		return fmt.Sprintf(
			productCardDiscountedTemplate,
			p.ShopLink,
			p.Title,
			p.GetSizesPretty(),
			p.GetCitiesPretty(),
			p.Quantity,
			p.PriceRUB,
			p.PriceRUB-uint64(*discount),
		)
	}

	return fmt.Sprintf(
		productCardTemplate,
		p.ShopLink,
		p.Title,
		p.GetSizesPretty(),
		p.GetCitiesPretty(),
		p.Quantity,
		p.PriceRUB,
	)
}
