package templates

import (
	"fmt"
	"strings"

	"domain"
)

const (
	cartPreviewStart = "–í–æ—Ç —Ç–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞!\n–ü–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ: %d\n\n"
	cartPreviewEnd   = "–ò—Ç–æ–≥–æ –≤ —Ä—É–±–ª—è—Ö: %d ‚ÇΩ\n\n" +
		"–¢—ã –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä(—ã) –ø–æ–¥ –∑–∞–∫–∞–∑, —Å —É—á–µ—Ç–æ–º —É–ø–∞–∫–æ–≤–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ú–æ—Å–∫–≤—ã, " +
		"–¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –¢–ö üåâ\n\n" +
		"–ì–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å? –ñ–º–∏ –∫–Ω–æ–ø–∫—É!"

	cartPreviewDiscountEnd = "–ò—Ç–æ–≥–æ –≤ —Ä—É–±–ª—è—Ö (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏): %d ‚ÇΩ\n\n" +
		"–¢—ã –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä(—ã) –ø–æ–¥ –∑–∞–∫–∞–∑, —Å —É—á–µ—Ç–æ–º —É–ø–∞–∫–æ–≤–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ú–æ—Å–∫–≤—ã, " +
		"–¥–∞–ª—å–Ω–µ–π—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –¢–ö üåâ\n\n" +
		"–ì–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å? –ñ–º–∏ –∫–Ω–æ–ø–∫—É!"

	positionPreviewInStock = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–¶–µ–Ω–∞: %d ‚ÇΩ\n–¶–µ–Ω–∞ –ø–æ —Ä—ã–Ω–∫—É: %d ‚ÇΩ\n–ù–∞–ª–∏—á–∏–µ: %s\n–ê—Ä—Ç–∏–∫—É–ª: %s\n\n"
	positionPreviewOrdered = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–¶–µ–Ω–∞: %d ‚ÇΩ\n–¶–µ–Ω–∞ –ø–æ —Ä—ã–Ω–∫—É: %d ‚ÇΩ\n–ê—Ä—Ç–∏–∫—É–ª: %s\n\n"

	positionPreviewWithDiscountInStock = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–¶–µ–Ω–∞: %d ‚ÇΩ\n–¶–µ–Ω–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏): %d ‚ÇΩ\n–¶–µ–Ω–∞ –ø–æ —Ä—ã–Ω–∫—É: %d ‚ÇΩ\n–ù–∞–ª–∏—á–∏–µ: %s\n–ê—Ä—Ç–∏–∫—É–ª: %s\n\n"
	positionPreviewWithDiscountOrdered = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–¶–µ–Ω–∞: %d ‚ÇΩ\n–¶–µ–Ω–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏): %d ‚ÇΩ\n–¶–µ–Ω–∞ –ø–æ —Ä—ã–Ω–∫—É: %d ‚ÇΩ\n–ê—Ä—Ç–∏–∫—É–ª: %s\n\n"

	editPosition = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë üôÖ‚Äç‚ôÇÔ∏è\n\n–ü–æ –∫–ª–∏–∫—É –Ω–∞ " +
		"–∫–Ω–æ–ø–∫—É –ø–æ–∑–∏—Ü–∏—è –∏–∑—á–µ–∑–Ω–µ—Ç –∏–∑ —Ç–≤–æ–µ–π –∫–æ—Ä–∑–∏–Ω—ã!"

	tryToAddWithInvalidInStock = "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä \"%s\", –Ω–æ –≤ —Ç–≤–æ–µ–π –∫–æ—Ä–∑–∏–Ω–µ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç " +
		"—Ç–æ–≤–∞—Ä \"%s\".\n\n–û—á–∏—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ \"%s\"."

	checkingCart = "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏"

	productNotFound = "–ü—Ä–æ–¥—É–∫—Ç: %s —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: [%s] O—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!\n\n–£–¥–∞–ª–∏ –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
)

func TryAddWithInvalidInStock(actual, want bool) string {
	actualStr, wantStr := domain.InStockToString(actual), domain.InStockToString(want)
	return fmt.Sprintf(tryToAddWithInvalidInStock, actualStr, wantStr, wantStr)
}

func EditCartPosition() string {
	return editPosition
}

func CheckingCart() string {
	return checkingCart
}

func ProductNotFound(name, isbn string) string {
	return fmt.Sprintf(productNotFound, name, isbn)
}

func RenderCart(cart domain.HouseholdCart, inStock bool) string {
	start := _cartPreviewStart(len(cart))
	var total uint32
	for _, groupedProduct := range cart.Group() {
		pos := groupedProduct.P
		if inStock {
			start += _cartPositionInStock(cartPositionInStockArgs{
				qty:         groupedProduct.Qty,
				price:       pos.Price,
				priceGlob:   pos.PriceGlob,
				availableIn: *pos.AvailableIn,
				name:        pos.Name,
				isbn:        pos.ISBN,
			})
		} else {
			start += _cartPositionOrdered(cartPositionOrderedArgs{
				qty:       groupedProduct.Qty,
				price:     pos.Price,
				priceGlob: pos.PriceGlob,
				name:      pos.Name,
				isbn:      pos.ISBN,
			})
		}

		total += pos.Price * uint32(groupedProduct.Qty)
	}
	return start + _cartPreviewEnd(total, false)
}

func RenderCartWithDiscount(cart domain.HouseholdCart, discount uint32, inStock bool) string {
	start := _cartPreviewStart(cart.Size())

	var discountedTotal uint32
	for _, groupedProduct := range cart.Group() {
		pos := groupedProduct.P
		if inStock {
			start += _cartPositionWithDiscountInStock(cartPositionWithDiscountInStockArgs{
				qty:             groupedProduct.Qty,
				price:           pos.Price,
				priceGlob:       pos.PriceGlob,
				availableIn:     *pos.AvailableIn,
				name:            pos.Name,
				isbn:            pos.ISBN,
				discountedPrice: pos.Price - discount,
			})
		} else {
			start += _cartPositionWithDiscountOrdered(cartPositionWithDiscountOrderedArgs{
				qty:             groupedProduct.Qty,
				price:           pos.Price,
				priceGlob:       pos.PriceGlob,
				name:            pos.Name,
				isbn:            pos.ISBN,
				discountedPrice: pos.Price - discount,
			})
		}

		discountedTotal += pos.Price*uint32(groupedProduct.Qty) - discount
	}
	return start + _cartPreviewEnd(discountedTotal, true)
}

type cartPositionOrderedArgs struct {
	qty       int
	price     uint32
	priceGlob uint32
	name      string
	isbn      string
}

func _cartPositionOrdered(args cartPositionOrderedArgs) string {
	return fmt.Sprintf(
		positionPreviewOrdered,
		args.qty,
		args.name,
		args.price,
		args.priceGlob,
		args.isbn,
	)
}

type cartPositionInStockArgs struct {
	qty         int
	price       uint32
	priceGlob   uint32
	name        string
	availableIn []string
	isbn        string
}

func _cartPositionInStock(args cartPositionInStockArgs) string {
	return fmt.Sprintf(
		positionPreviewInStock,
		args.qty,
		args.name,
		args.price,
		args.priceGlob,
		strings.Join(args.availableIn, ";"),
		args.isbn,
	)
}

type cartPositionWithDiscountOrderedArgs struct {
	qty             int
	price           uint32
	discountedPrice uint32
	priceGlob       uint32
	name            string
	isbn            string
}

func _cartPositionWithDiscountOrdered(args cartPositionWithDiscountOrderedArgs) string {
	return fmt.Sprintf(
		positionPreviewWithDiscountOrdered,
		args.qty,
		args.name,
		args.price,
		args.discountedPrice,
		args.priceGlob,
		args.isbn,
	)
}

type cartPositionWithDiscountInStockArgs struct {
	qty             int
	price           uint32
	discountedPrice uint32
	priceGlob       uint32
	availableIn     []string
	name            string
	isbn            string
}

func _cartPositionWithDiscountInStock(args cartPositionWithDiscountInStockArgs) string {
	return fmt.Sprintf(
		positionPreviewWithDiscountInStock,
		args.qty,
		args.name,
		args.price,
		args.discountedPrice,
		args.priceGlob,
		strings.Join(args.availableIn, ";"),
		args.isbn,
	)
}

func _cartPreviewEnd(totalRub uint32, discounted bool) string {
	if discounted {
		return fmt.Sprintf(cartPreviewDiscountEnd, totalRub)
	}
	return fmt.Sprintf(cartPreviewEnd, totalRub)
}

func _cartPreviewStart(numPositions int) string {
	return fmt.Sprintf(cartPreviewStart, numPositions)
}
