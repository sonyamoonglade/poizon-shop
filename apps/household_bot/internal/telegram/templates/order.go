package templates

import (
	"fmt"

	"domain"
)

const (
	askForOrderTypeTemplate = "viberi tip zakaza"

	askForDeliveryAddressTemplate = "–û—Ç–ø—Ä–∞–≤—å –∞–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ—Å—Ç–∞–º–∞—Ç–∞ PickPoint –∏–ª–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –°–î–≠–ö ‚õ≥Ô∏è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
		"–°—Ç—Ä–∞–Ω–∞, –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞/—Å—Ç—Ä–æ–µ–Ω–∏—è üè°\n\n" +
		"–Ø –¥–æ—Å—Ç–∞–≤–ª—é —Ç–≤–æ–π –∑–∞–∫–∞–∑ —Ç—É–¥–∞ üöö"

	askForPhoneNumberTemplate = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n üëâ 79128000000"

	invalidFIOInputTemplate = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏.\\n –û—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ " +
		"—Ñ–æ—Ä–º–∞—Ç–µ - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"

	askForFIOTemplate = "–£–∫–∞–∂–∏ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è \U0001FAAA"

	deliveryOnlyToMoscowTemplate = "–°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ú–æ—Å–∫–≤—ã, –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥—Ä—É–≥–∏–µ " +
		"–≥–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã –†–æ—Å—Å–∏–∏ –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –¢–ö –°–î–ï–ö üöö"

	requisitesTemplate = "–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞: [%s]\n\n–¢–∏–º–æ—Ñ–µ–µ–≤ –í–∞–¥–∏–º –î–µ–Ω–∏—Å–æ–≤–∏—á üíÅ‚Äç ‚ôÇÔ∏è @xKK_Russia\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã " +
		"–°–±–µ—Ä: %s\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¢–∏–Ω—å–∫–æ—Ñ—Ñ: %s\n–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ [%s]\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—á–µ–Ω–æ¬ª\n"

	orderStartTemplate = "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–∫–∞–∑—ã–≤–∞–µ—à—å, –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ üß∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π, " +
		"–µ—Å–ª–∏ –æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ 48—á ‚åöÔ∏è–∏ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π  ‚Äì –∑–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç –∏ –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—Ç—è—Ç—Å—è –≤ –ø–æ–ª–Ω–æ–º " +
		"–æ–±—ä–µ–º–µ –Ω–∞ –∫–∞—Ä—Ç—É –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ üí¥\n\n%s - –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: [%s]\n\n–î–∞–Ω–Ω—ã–µ " +
		"–ø–æ–ª—É—á–∞—Ç–µ–ª—è\n–§–ò–û: %s\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: %s\n\n–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: %d\n\n"

	orderEndTemplate = "–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %d ‚ÇΩ\n\n–í—ã—Å—ã–ª–∞—é —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã üßæ"

	successfulPaymentTemplate = "%s, —Ç–≤–æ–π –∑–∞–∫–∞–∑ %s —Å–µ–π—á–∞—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∞. –û–Ω –Ω–∞–ø–∏—à–µ—Ç —Ç–µ–±–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è " +
		"–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏.\n\n‚ÄºÔ∏è–ù–∏–∫–æ–º—É –∫—Ä–æ–º–µ –±–æ—Ç–∞ –¥–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ‚ÄºÔ∏è–î–∞–∂–µ –∞–¥–º–∏–Ω—É‚ÄºÔ∏è\n\n–¢–æ–ª—å–∫–æ " +
		"–∞–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –∏ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏ ‚úÖ"
)

func AskForFIO() string {
	return askForFIOTemplate
}

func InvalidFIO() string {
	return invalidFIOInputTemplate
}

func AskForPhoneNumber() string {
	return askForPhoneNumberTemplate
}

func AskForDeliveryAddress() string {
	return askForDeliveryAddressTemplate
}

func Requisites(shortOrderID string, r domain.Requisites) string {
	return fmt.Sprintf(requisitesTemplate, shortOrderID, r.SberID, r.TinkoffID, shortOrderID)
}

func AskForOrderType() string {
	return askForOrderTypeTemplate
}

func RenderOrder(order domain.HouseholdOrder) string {
	start := _orderStart(order)
	for _, pos := range order.Cart {
		start += _cartPositionTemplate(cartPositionArgs{
			n:           len(order.Cart),
			priceRub:    pos.Price,
			productName: pos.Name,
		})
	}
	return start + _orderEnd(order.AmountRUB)
}

func SuccessfulPayment(fullName, orderShortID string) string {
	return fmt.Sprintf(successfulPaymentTemplate, fullName, orderShortID)
}

func _orderStart(order domain.HouseholdOrder) string {
	return fmt.Sprintf(
		orderStartTemplate,
		*order.Customer.FullName,
		order.ShortID,
		*order.Customer.FullName,
		*order.Customer.PhoneNumber,
		order.DeliveryAddress,
		len(order.Cart),
	)
}

func _orderEnd(totalRub uint32) string {
	return fmt.Sprintf(orderEndTemplate, totalRub)
}

func _formatIsExpress(isExpress bool) string {
	if isExpress {
		return domain.ExpressStr
	}
	return domain.NormalStr
}
