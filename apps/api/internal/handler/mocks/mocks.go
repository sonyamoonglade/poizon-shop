// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	handler "onlineshop/api/internal/handler"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRateProvider is a mock of RateProvider interface.
type MockRateProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRateProviderMockRecorder
}

// MockRateProviderMockRecorder is the mock recorder for MockRateProvider.
type MockRateProviderMockRecorder struct {
	mock *MockRateProvider
}

// NewMockRateProvider creates a new mock instance.
func NewMockRateProvider(ctrl *gomock.Controller) *MockRateProvider {
	mock := &MockRateProvider{ctrl: ctrl}
	mock.recorder = &MockRateProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateProvider) EXPECT() *MockRateProviderMockRecorder {
	return m.recorder
}

// GetYuanRate mocks base method.
func (m *MockRateProvider) GetYuanRate(ctx context.Context) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYuanRate", ctx)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYuanRate indicates an expected call of GetYuanRate.
func (mr *MockRateProviderMockRecorder) GetYuanRate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYuanRate", reflect.TypeOf((*MockRateProvider)(nil).GetYuanRate), ctx)
}

// UpdateRate mocks base method.
func (m *MockRateProvider) UpdateRate(ctx context.Context, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRate", ctx, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRate indicates an expected call of UpdateRate.
func (mr *MockRateProviderMockRecorder) UpdateRate(ctx, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRate", reflect.TypeOf((*MockRateProvider)(nil).UpdateRate), ctx, rate)
}

// MockImageUploader is a mock of ImageUploader interface.
type MockImageUploader struct {
	ctrl     *gomock.Controller
	recorder *MockImageUploaderMockRecorder
}

// MockImageUploaderMockRecorder is the mock recorder for MockImageUploader.
type MockImageUploaderMockRecorder struct {
	mock *MockImageUploader
}

// NewMockImageUploader creates a new mock instance.
func NewMockImageUploader(ctrl *gomock.Controller) *MockImageUploader {
	mock := &MockImageUploader{ctrl: ctrl}
	mock.recorder = &MockImageUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageUploader) EXPECT() *MockImageUploaderMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockImageUploader) Put(ctx context.Context, dto handler.PutFileDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockImageUploaderMockRecorder) Put(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockImageUploader)(nil).Put), ctx, dto)
}

// UrlToResource mocks base method.
func (m *MockImageUploader) UrlToResource(filename string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UrlToResource", filename)
	ret0, _ := ret[0].(string)
	return ret0
}

// UrlToResource indicates an expected call of UrlToResource.
func (mr *MockImageUploaderMockRecorder) UrlToResource(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrlToResource", reflect.TypeOf((*MockImageUploader)(nil).UrlToResource), filename)
}
